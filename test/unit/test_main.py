
from unittest import TestCase
from refseqscan import main
from tgmi.transcripts import Transcript, Exon
from refseqscan.reference import Reference

class TestMain(TestCase):

    def test_reverse_complement(self):
        assert main.reverse_complement('ACTGAACGTCATTAC') == 'GTAATGACGTTCAGT'
        assert main.reverse_complement('') == ''

    def test_get_reference_sequence(self):
        transcript = Transcript()
        transcript.chrom = '1'
        transcript.exons = [
            Exon('231762560-231762680'),
            Exon('231829571-231830551'),
            Exon('231837700-231838307')
        ]

        expected = 'GGAAGGAGCAGGAGGCAGCCCAGGCGGAGCGGGAGGAGCTGGCAGCGGGGCGCATGCCAGGCGGGGGTCCTCAGGGCGCCCCAGCCGCCGCCGGCGGCGGCGGCGTGAGCCACCGCGCAGGCAGCCGGGATTGCTTACCACCTGCAGCGTGCTTTCGGAGGCGGCGGCTGGCACGGAGGCCGGGCTACATGAGAAGCTCGACAGGGCCTGGGATCGGGTTCCTTTCCCCAGCAGTGGGCACACTGTTCCGGTTCCCAGGAGGGGTGTCTGGCGAGGAGTCCCACCACTCGGAGTCCAGGGCCAGACAGTGTGGCCTTGACTCGAGAGGCCTCTTGGTCCGGAGCCCTGTTTCCAAGAGTGCAGCAGCCCCTACTGTGACCTCTGTGAGAGGAACCTCGGCGCACTTTGGGATTCAGCTCAGAGGTGGCACCAGATTGCCTGACAGGCTTAGCTGGCCGTGTGGCCCTGGGAGTGCTGGGTGGCAGCAAGAGTTTGCAGCCATGGATAGTTCTGAGACCCTGGACGCCAGCTGGGAGGCAGCCTGCAGCGATGGAGCAAGGCGTGTCCGGGCAGCAGGCTCTCTGCCATCAGCAGAGTTGAGTAGCAACAGCTGCAGCCCTGGCTGTGGCCCTGAGGTCCCCCCAACCCCTCCTGGCTCTCACAGTGCCTTTACCTCAAGCTTTAGCTTTATTCGGCTCTCGCTTGGCTCTGCCGGGGAACGTGGAGAAGCAGAAGGCTGCCCACCATCCAGAGAGGCTGAGTCCCATTGCCAGAGCCCCCAGGAGATGGGAGCCAAAGCTGCCAGCTTGGACGGGCCTCACGAGGACCCGCGATGTCTCTCTCGGCCCTTCAGTCTCTTGGCTACACGGGTCTCTGCAGACTTGGCCCAGGCCGCAAGGAACAGCTCCAGGCCAGAGCGTGACATGCATTCTTTACCAGACATGGACCCTGGCTCCTCCAGTTCTCTGGATCCCTCACTGGCTGGCTGTGGTGGTGATGGGAGCAGCGGCTCAGGGGATGCCCACTCTTGGGACACCCTGCTCAGGAAATGGGAGCCAGTGCTGCGGGACTGCCTGCTGAGAAACCGGAGGCAGATGGAGGTAATATCCTTAAGATTAAAACTTCAGAAACTTCAGGAAGATGCAGTTGAGAATGATGATTATGATAAAGGTGAGTTTTAATTTGTTTATTGATTGTTTTGTCATCATGTCCCAATTTTCTTTCCATCTTTACTCATATCTACCTTTTGAATCCCAAAAGAATTGTACAATCTGTTCCTCTGATCATCTCTACCAGGGAATAGTTGACTCTTTTACAGCATTATTGTTTTGTAGATTTCAAAGTACTTCATGAACATTAATCCTTTGGGTTATAAATATAACCTTATCAATTGTCCAGAAACACTTAGCATACTCACACAATAAAAATTATATTAGCTTGCCACCTGTCTGCCCATGGTGTGATGTATCTATAATCCACTTGTTCATAAAAAATATTCGTCTGACACCTATGATATGCTAGGGAATATGGGAGACAATAGGAAAGTAAGACAGACATGGTATCTGCCCTTGTGATGCCAGTAAACTTAAGCCTTCATGGGGCTCTCTGACTTCATAATTTCCAGAACCAGAGATAGGAAATGAGGTGAATTTGAGAAATGTCAGACTGTGCCAAAGGGGGTCACATGCATCAAATTTCCACATACAT'
        reference = Reference('/Users/munz/root/work/data/genomes/GRCh37/human_g1k_v37.fasta')
        assert main.get_reference_sequence(transcript, reference) == expected


    def test_compare_sequences(self):
        assert main.compare_sequences('AAAAAAAAAA', 'AAAAAAAAAA', 3, 8) == '.'
        assert main.compare_sequences('AACAAAAAAA', 'AAAAAAAAAA', 3, 8) == 'c.1C>A'
        assert main.compare_sequences('AAAAAAAAAA', 'AAAAGAAAAA', 3, 8) == 'c.3A>G'
        assert main.compare_sequences('AACAAAAAAA', 'AAAAGAAAAA', 3, 8) == 'c.1C>A,c.3A>G'
        assert main.compare_sequences('ATAAAAAAAA', 'AAAAAAAAAA', 3, 8) == 'c.-1T>A'
        assert main.compare_sequences('AAAAAAAAAA', 'AAAAAAAAAC', 3, 8) == 'c.+2A>C'
        assert main.compare_sequences('TTTTTTTT', 'TTTTTTTTTT', 3, 8) == 'lengthChange'
        assert main.compare_sequences('TTTTTTTT', 'TTTTTTTTAAA', 3, 8) == '.'
        assert main.compare_sequences('TTTTTTTT', 'TTGTTTTTAAA', 3, 8) == 'c.1T>G'
        assert main.compare_sequences('TTTTTTTTA', 'TTGTTTTTAAA', 3, 8) == 'c.1T>G'

